package importer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Enumeration;
import java.util.Hashtable;

public class PLMXMLExport {

	private Item root;
	private static Hashtable<String, Item> items;
	private static int tab = 0;
	private static int id = 1;
	private static BufferedWriter bw;
	
	private static int ruleId = id++;
	private static int viewId = id++;
	private static int viewRevId = id++;
	private static int rootOccId = id++;
	
	public PLMXMLExport (Item root_in, Hashtable<String, Item> items_in,  File dir) throws IOException {
		
		root = root_in;
		PLMXMLExport.items = items_in;
		prepare(root);
	    File file = new File(dir.getAbsolutePath() + "//" + root.getID() + ".plmxml");
	    
		bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF8"));
	    bw.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
	    bw.write("<!-- GENERATED BY: PLM XML SDK 7.0.1.070 -->\n");
	    bw.write(indet(tab) + "<PLMXML xmlns=\"http://www.plmxml.org/Schemas/PLMXMLSchema\" schemaVersion=\"6\" language=\"ru-ru\" author=\"Teamcenter V9000.1.0.20120307.00 - infodba\">\n");
	    tab += 1;
	    bw.write(indet(tab) + "<Header id=\"id0\" traverseRootRefs=\"#" + root.getProductId() + "\" transferContext=\"ConfiguredDataFilesExportDefault\"/>\n");
	    
	    writeProductData(root);

	    Enumeration keys = PLMXMLExport.items.keys();

	    while (keys.hasMoreElements()) {
	      String key = (String)keys.nextElement();
	      prepare((Item)items.get(key));
	      writeProductData((Item)items.get(key));
	    }
	    
	    bw.write(indet(tab++) + "<ProductDef id=\"id" + id++ + "\">\n");
	    bw.write(indet(tab++) + "<InstanceGraph id=\"id" + id++ + "\">\n");
	    bw.write(indet(tab) + "<ApplicationRef application=\"PLMXML\" label=\"" + "PLMXML" + "/InstanceGraph/\"/>\n");
	    bw.write(indet(tab++) + "<UserData id=\"id" + id++ + "\" type=\"TC Specific Properties\">\n");
	    bw.write(indet(tab) + "<UserValue value=\"imprecise\" title=\"BOM_precision_type\"/>\n");
	    bw.write(indet(--tab) + "</UserData>\n");

	    keys = PLMXMLExport.items.keys();
	    while (keys.hasMoreElements()) {
	    	String key = (String)keys.nextElement();
		    Item item = (Item)PLMXMLExport.items.get(key);
		    String position = item.getProp("Позиция");
		    position = (position.contains(".") ? position.substring(0, position.indexOf(".")) : position);
		    bw.write(indet(tab) + "<ProductInstance id=\"" + item.getProductInsId() + "\" partRef=\"#" + item.getProductRevisionViewId() + "\"" + 
		    		((position.length()>0) ? " sequenceNumber=\""+position+"\"" : "") + 
		    		" quantity=\""+item.getOccIds().size()+"\"/>\n");
	    }

	    keys = PLMXMLExport.items.keys();
	    while (keys.hasMoreElements()) {
	      String key = (String)keys.nextElement();
	      Item item = (Item)PLMXMLExport.items.get(key);
	      String viewBlock = "";
	      bw.write(indet(tab) + "<ProductRevisionView id=\"" + item.getProductRevisionViewId() + "\"" + viewBlock + " revisionRef=\"#" + item.getProductRevId() + "\"/>\n");
	    }
	    
	    bw.write(indet(--tab) + "</InstanceGraph>\n");
	    bw.write(indet(--tab) + "</ProductDef>\n");

	    bw.write(indet(tab) + "<RevisionRule id=\"id" + ruleId + "\" name=\"Latest Working\">\n");
	    bw.write(indet(++tab) + "<Description>Latest Working else Latest Any Status</Description>\n");
	    bw.write(indet(--tab) + "</RevisionRule>\n");

	    bw.write(indet(tab) + "<ProductView id=\"id" + id++ + "\" ruleRefs=\"#id" + ruleId + "\" rootRefs=\"id" + rootOccId + "\" primaryOccurrenceRef=\"id" + rootOccId + "\">\n");

	    bw.write(indet(++tab) + "<UserData id=\"id" + id++ + "\" type=\"TC Specific Properties\">\n");
	    bw.write(indet(++tab) + "<UserValue value=\"imprecise\" title=\"BOM_precision_type\"/>\n");
	    bw.write(indet(--tab) + "</UserData>\n");

	    bw.write(indet(tab) + "<Occurrence id=\"id" + rootOccId + "\" instancedRef=\"#" + root.getProductRevId() + "\" occurrenceRefs=\"" + getOccLine() + "\"/>\n");
	    keys = PLMXMLExport.items.keys();
	    while (keys.hasMoreElements()) {
		      String key = (String)keys.nextElement();
		      writeOccurences((Item)items.get(key));
		}
	    
	    bw.write(indet(--tab) + "</ProductView>\n");

	    bw.write(indet(tab) + "<View id=\"id" + viewId + "\" name=\"view\"/>\n");
	    bw.write(indet(tab) + "<ProductRevisionView id=\"id" + viewRevId + "\" viewRef=\"#id" + viewId + "\"/>\n");

	    bw.write(indet(--tab) + "</PLMXML>");

	    bw.flush();
	    bw.close();
	}
	
	private void writeOccurences(Item item) throws IOException {
		int occCount = item.getOccIds().size();
		bw.write(indet(tab) + "<Occurrence id=\"id" + item.getOccIds().get(0) + "\" instancedRef=\"#" + item.getProductRevId() + "\" instanceRefs=\"#" + item.getProductInsId() + "\" parentRef=\"#" + rootOccId + "\"/>\n");
		/*for(int i = 0; i< occCount; i++){
			bw.write(indet(tab) + "<Occurrence id=\"id" + item.getOccIds().get(i) + "\" instancedRef=\"#" + item.getProductRevId() + "\" instanceRefs=\"#" + item.getProductInsId() + "\" parentRef=\"#" + rootOccId + "\"/>\n");
		}*/
	}
	
	public static String getOccLine() {
	    String res = "";
	    Enumeration keys = items.keys();

	    while (keys.hasMoreElements()) {
	      String key = (String)keys.nextElement();
	      res = res + " id" + ((Item)items.get(key)).getOccIds().get(0);
	      /*for(String occId:((Item)items.get(key)).getOccIds()){
	    	  res = res + " id" + occId;
	      }*/
	    }
	    return res.trim();
	}
	
	private void prepare(Item item) {
	    if (item.getProductId().length() == 0) {
	      item.setProductId(id++);
	      item.setProductRevId(id++);
	      item.setProductRevisionViewId(id++);
	      item.setProductInsId(id++);
	      for(int i = 0; i<Double.parseDouble(item.getProp("Количество")); i++){
	    	  item.addOccId(id++);
	      }
	      if(Double.parseDouble(item.getProp("Количество"))==0){
	    	  item.addOccId(id++);
	      }
	    }
	}
	
	private void writeProductData(Item item) throws IOException {
	    String unitBlock = "";
	    String type = item.getProp("Тип");
	    String subtype = item.getProp("Подтип");
	    String designation = item.getProp("Обозначение");

	    bw.write(indet(tab) + "<Product id=\"" + item.getProductId() + "\" name=\"" + item.getProp("Наименование") + "\" subType=\""+type+"\"" + unitBlock + ">\n");
	    bw.write(indet(++tab) + "<ApplicationRef version=\"" + item.getID() + "\" application=\"PLMXML\" label=\"" + "PLMXML" + "\"></ApplicationRef>\n");
	    if ((designation.length() > 0) || (subtype.length() > 0)) {
	      bw.write(indet(tab) + "<UserData id=\"id" + id++ + "\">\n");
	      tab++;
	      if(designation.length()>0) {bw.write(indet(tab) + "<UserValue value=\"" + designation + "\" title=\"pm8_Designation\"/>\n");}
	      if(subtype.length()>0) {bw.write(indet(tab) + "<UserValue value=\"" + subtype + "\" title=\"pm8_TypeOfPart\"/>\n");}
	      bw.write(indet(--tab) + "</UserData>\n");
	    }
	    bw.write(indet(--tab) + "</Product>\n");
	    bw.write(indet(tab) + "<ProductRevision id=\"" + item.getProductRevId() + "\" name=\"" + item.getProp("Наименование") + "\" masterRef=\"#" + item.getProductId() + "\" subType=\""+ type +"Revision\" revision=\"0\">\n");
	    bw.write(indet(++tab) + "<ApplicationRef version=\"" + item.getID() + "/0\" application=\"PLMXML\" label=\"" + "PLMXML" + "/0\"></ApplicationRef>\n");
	    bw.write(indet(--tab) + "</ProductRevision>\n");
	}
	
	private static String indet(int n) {
		String res = "";
		for (int i = 0; i < n; i++) res = res + "\t";
		return res;
	}

}
